"$schema" = "https://yazi-rs.github.io/schemas/keymap.json"

[manager]
prepend_keymap = [
  # Plugins
  { on = ["l"], run = "plugin smart-enter", desc = "Enter the child directory, or open the file" },
  { on = "<Enter>", run = 'plugin smart-enter' },
  { on = ["p", "m"], run = "plugin smart-paste", desc = "Paste into the hovered directory or CWD" },
  # { on = [ "H" ], run = "plugin hide-preview", desc = "Hide preview pane" },
  { on = ["T"], run = "plugin max-preview", desc = "Maximize or restore preview pane" },
  { on = ["f"], run = "plugin jump-to-char", desc = "Jump to char" },
  { on = [ "b", "a" ], run = "plugin mactag --args='add'", desc = "Tag selected files" },
  { on = [ "b", "r" ], run = "plugin mactag --args='remove'", desc = "Untag selected files" },
  { on = [";", "l"], run = "plugin lazygit", desc = "Run Lazygit" },
  { on = [";", "c"], run = "plugin compress", desc = "Archive selected files" },
  { on = [";", "z"], run = "plugin zoxide", desc = "Jump with zoxide" },
	{ on = [";", "f"], run = "plugin fzf", desc = "Jump with fzf" },
]

keymap = [
  # Navigation
  { on = "h", run = "leave", desc = "Go back to the parent directory" },
	{ on = "l", run = "enter", desc = "Enter the child directory" },
  { on = "<Left>",  run = "leave", desc = "Go back to the parent directory" },
	{ on = "<Right>", run = "enter", desc = "Enter the child directory" },
	{ on = [ "H" ], run = "back" },
	{ on = [ "L" ], run = "forward" },

  { on = "k", run = "arrow -1", desc = "Move cursor up" },
	{ on = "j", run = "arrow 1", desc = "Move cursor down" },
	{ on = [ "<C-k>" ], run = "seek -5" },
	{ on = [ "<C-j>" ], run = "seek 5" },

  { on = ["g", "g"], run = "arrow -99999999", desc = "Move cursor to the top" },
	{ on = "G", run = "arrow 99999999", desc = "Move cursor to the bottom" },
  { on = "q", run = "close", desc = "Close the current tab, or quit if it is last tab" },
  { on = "<Esc>", run = "escape", desc = "Exit visual mode, clear selected, or cancel search" },
  { on = ".", run = "hidden toggle", desc = "Toggle the visibility of hidden files" },

  # Create
  { on = "a", run = "create", desc = "Create a file (ends with / for directories)" },
	{ on = "A", run = "create --dir", desc = "Create a directory" },

  # Selection
	# { on = "<Space>", run = ["toggle", "arrow 1"], desc = "Toggle the current selection state" },
	{ on = "<Space>", run = "toggle", desc = "Toggle the current selection state" },
	{ on = "v", run = "toggle_all", desc = "Enter visual mode (selection mode)" },
	{ on = "V", run = "visual_mode --unset", desc = "Enter visual mode (unset mode)" },

  # rename
  { on = ["c", "w"], run = "rename --empty=all", desc = "Rename selected file(s)" },
	{ on = "r", run = "rename --cursor=start", desc = "Rename selected file(s)" },

  # Find
	{ on = "/", run = "find --smart", desc = "Find next file" },
	{ on = ",", run = "find --previous --smart", desc = "Find previous file" },
	{ on = "n", run = "find_arrow", desc = "Go to the next found" },
	{ on = "N", run = "find_arrow --previous", desc = "Go to the previous found" },

  # Filter
  { on = ["F"], run = "filter --smart", desc = "Filter the files" },

  # Help
  { on = ["?"], run = "help", desc = "Open help" },

  # Shell
  { on = ["<C-s>"], run = 'shell "$SHELL" --block --confirm', desc = "Open shell here" },

  # Tasks
	{ on = [";", "w"], run = "tasks_show", desc = "Show task manager" },

  # Open
	{ on = [";", "o"], run = "open --interactive", desc = "Open selected files interactively" },
  
  # Operation: D
	{ on = ["d"], run = "remove", desc = "Trash selected files" },
	{ on = ["D"], run = "remove --permanently", desc = "Permanently delete selected files" },
	{ on = ["x"], run = "yank --cut", desc = "Yank selected files (cut)" },

  # Operation: Y
	{ on = ["y", "y"], run = "yank", desc = "Yank selected files (copy)" },
	{ on = ["y", "p"], run = "copy path", desc = "Copy the file path" },
	{ on = ["y", "d"], run = "copy dirname", desc = "Copy the directory path" },
	{ on = ["y", "f"], run = "copy filename", desc = "Copy the filename" },
	{ on = ["y", "n"], run = "copy name_without_ext", desc = "Copy the filename without extension" },
	{ on = ["y", "c"], run = "unyank", desc = "Cancel the yank status" },

	# Operation: P
	{ on = ["p", "p"], run = "paste", desc = "Paste yanked files" },
	{ on = ["p", "P"], run = "paste --force", desc = "Paste yanked files (overwrite if the destination exists)" },
	{ on = ["p", "l"], run = "link", desc = "Symlink the absolute path of yanked files" },
	{ on = ["p", "L"], run = "link --relative", desc = "Symlink the relative path of yanked files" },
	{ on = ["p", "h"], run = "hardlink", desc = "Hardlink yanked files" },

  # Linemode
	{ on = ["m", "s"], run = "linemode size", desc = "Set linemode to size" },
	{ on = ["m", "p"], run = "linemode perm", desc = "Set linemode to permissions" },
	{ on = ["m", "c"], run = "linemode btime", desc = "Set linemode to btime" },
	{ on = ["m", "m"], run = "linemode mtime", desc = "Set linemode to mtime" },
	{ on = ["m", "o"], run = "linemode owner", desc = "Set linemode to owner" },
	{ on = ["m", "n"], run = "linemode none", desc = "Set linemode to none" },

  # Sorting
	{ on = ["o", "M"], run = ["sort mtime --reverse=no", "linemode mtime"], desc = "Sort by modified time" },
	{ on = ["o", "m"], run = ["sort mtime --reverse", "linemode mtime"], desc = "Sort by modified time (reverse)" },
	{ on = ["o", "C"], run = ["sort btime --reverse=no", "linemode btime"], desc = "Sort by created time" },
	{ on = ["o", "c"], run = ["sort btime --reverse", "linemode btime"], desc = "Sort by created time (reverse)" },
	{ on = ["o", "E"], run = "sort extension --reverse=no", desc = "Sort by extension" },
	{ on = ["o", "e"], run = "sort extension --reverse", desc = "Sort by extension (reverse)" },
	{ on = ["o", "a"], run = "sort alphabetical --reverse=no", desc = "Sort alphabetically" },
	{ on = ["o", "A"], run = "sort alphabetical --reverse", desc = "Sort alphabetically (reverse)" },
	{ on = ["o", "n"], run = "sort natural --reverse=no", desc = "Sort naturally" },
	{ on = ["o", "N"], run = "sort natural --reverse", desc = "Sort naturally (reverse)" },
	{ on = ["o", "s"], run = ["sort size --reverse=no", "linemode size"], desc = "Sort by size" },
	{ on = ["o", "S"], run = ["sort size --reverse", "linemode size"], desc = "Sort by size (reverse)" },

  # Goto
	{ on = ["g", "r"], run = "cd /", desc = "Go to the root directory" },
	{ on = ["g", "h"], run = "cd ~", desc = "Go to the home directory" },
	{ on = ["g", "p"], run = "cd ~/Pictures", desc = "Go to the pictures directory" },
	{ on = ["g", "m"], run = "cd ~/Movies", desc = "Go to the movies directory" },
	{ on = ["g", "d"], run = "cd ~/Downloads", desc = "Go to the downloads directory" },
	{ on = ["g", "i"], run = "cd ~/Github", desc = "Go to the Github directory" },
	{ on = ["g", "n"], run = "cd ~/Github/site/notebook", desc = "Go to the notebook directory" },
	{ on = ["g", "c"], run = "cd ~/.config", desc = "Go to the config directory" },
	{ on = ["g", "f", "c"], run = "cd ~/.config" },
	{ on = ["g", "f", "v"], run = "cd ~/Github/dotfiles/nvim" },
	{ on = ["g", "f", "y"], run = "cd ~/Github/dotfiles/yazi" },
	{ on = ["g", "f", "t"], run = "cd ~/Github/dotfiles/tmux" },
	{ on = ["g", "<Space>"], run = "cd --interactive", desc = "Go to a directory interactively" },
]

[input]
keymap = [
	{ on = "<C-c>", run = "close", desc = "Cancel input" },
	{ on = "q", run = "close", desc = "Cancel input" },
	{ on = "<Enter>", run = "close --submit", desc = "Submit the input" },
	{ on = "<Esc>", run = "escape", desc = "Go back the normal mode, or cancel input" },

	# Mode
	{ on = "i", run = "insert", desc = "Enter insert mode" },
	{ on = "a", run = "insert --append", desc = "Enter append mode" },
	{ on = "v", run = "visual", desc = "Enter visual mode" },
	{ on = "<F1>", run = "help", desc = "Open help" },
	{ on = "c", run = "delete --cut --insert", desc = "Cut the selected characters, and enter insert mode" },
	{ on = "C", run = ["delete --cut --insert", "move 999"], desc = "Cut until the EOL, and enter insert mode" },
	{ on = "x", run = ["delete --cut", "move 1 --in-operating"], desc = "Cut the current character" },
	{ on = "y", run = "yank", desc = "Copy the selected characters" },
	{ on = "p", run = "paste", desc = "Paste the copied characters after the cursor" },
	{ on = "P", run = "paste --before", desc = "Paste the copied characters before the cursor" },

	# Undo/Redo
	{ on = "u", run = "undo", desc = "Undo the last operation" },
	{ on = "<C-r>", run = "redo", desc = "Redo the last operation" },

	# Help
	{ on = "~", run = "help", desc = "Open help" },

	# Cut/Yank/Paste
	{ on = "d", run = "delete --cut", desc = "Cut the selected characters" },
	{ on = "D", run = ["delete --cut", "move 999"], desc = "Cut until the Ee current or next word" },

	# Line-wise movement
	{ on = "<S-h>", run = "move -999", desc = "Move to the BOL" },
	{ on = "<S-l>", run = "move 999", desc = "Move to the EOL" },
	{ on = "<S-k>", run = "move -999", desc = "Move to the BOL" },
	{ on = "<S-j>", run = "move 999", desc = "Move to the EOL" },
	{ on = "<Home>", run = "move -999", desc = "Move to the BOL" },
	{ on = "<End>", run = "move 999", desc = "Move to the EOL" },

  # Delete
	{ on = "<Backspace>", run = "backspace", desc = "Delete the character before the cursor" },
	{ on = "<Delete>", run = "backspace --under", desc = "Delete the character under the cursor" },

	# Character-wise movement
	{ on = "h", run = "move -1", desc = "Move back a character" },
	{ on = "l", run = "move 1", desc = "Move forward a character" },
	{ on = "<Left>", run = "move -1", desc = "Move back a character" },
	{ on = "<Right>", run = "move 1", desc = "Move forward a character" },

	# Word-wise movement
	{ on = "b", run = "backward", desc = "Move back to the start of the current or previous word" },
	{ on = "w", run = "forward", desc = "Move forward to the start of the next word" }
]

[completion]
prepend_keymap = [
	{ on = [ "<C-k>" ], run = "arrow -1" },
	{ on = [ "<C-j>" ], run = "arrow 1" },
]

